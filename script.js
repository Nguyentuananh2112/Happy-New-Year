function createStars() {
  const starsContainer = document.querySelector('.snow-container');
  const numberOfStars = 100;

  for (let i = 0; i < numberOfStars; i++) {
    const star = document.createElement('div');
    star.classList.add('star');
    star.style.left = Math.random() * 100 + '%';
    star.style.top = Math.random() * 60 + '%'; // Ch·ªâ ·ªü n·ª≠a tr√™n m√†n h√¨nh
    star.style.animationDelay = Math.random() * 2 + 's';
    starsContainer.appendChild(star);
  }
}

// G·ªçi h√†m t·∫°o sao khi trang web load
createStars();

function createSnow() {
  const snowContainer = document.querySelector('.snow-container');
  const snow = document.createElement('div');
  snow.classList.add('snow');

  // V·ªã tr√≠ ng·∫´u nhi√™n theo chi·ªÅu ngang
  snow.style.left = Math.random() * 100 + '%';

  // T·ªëc ƒë·ªô r∆°i v√† k√≠ch th∆∞·ªõc ng·∫´u nhi√™n
  const duration = Math.random() * 5 + 5;
  const size = Math.random() * 3 + 2;

  snow.style.width = size + 'px';
  snow.style.height = size + 'px';
  snow.style.opacity = Math.random() * 0.7 + 0.3;

  // Th√™m animation
  snow.style.animation = `fall ${duration}s linear`;

  snowContainer.appendChild(snow);

  // X√≥a b√¥ng tuy·∫øt sau khi r∆°i xong
  setTimeout(() => {
    snow.remove();
  }, duration * 1000);
}

// C·∫≠p nh·∫≠t keyframes animation
const style = document.createElement('style');
style.textContent = `
  @keyframes fall {
    from {
      transform: translateY(-10px);
    }
    to {
      transform: translateY(100vh);
    }
  }
  
  @keyframes sway {
    from {
      transform: translateX(-15px);
    }
    to {
      transform: translateX(15px);
    }
  }
`;
document.head.appendChild(style);

// T·∫°o tuy·∫øt v·ªõi t·∫ßn su·∫•t th·∫•p h∆°n
setInterval(() => {
  if (Math.random() < 0.2) { // Ch·ªâ c√≥ 20% kh·∫£ nƒÉng t·∫°o bao l√¨ x√¨ m·ªói l·∫ßn ki·ªÉm tra
    createGift();
  }
}, 10000); // Ki·ªÉm tra m·ªói 1 gi√¢y


// Th√™m v√†o cu·ªëi file
const musicBtn = document.querySelector('.music-toggle');
const audio = document.getElementById('bgMusic');


// Th√™m hi·ªáu ·ª©ng di chuy·ªÉn cho con r·ªìng
function moveDragon() {
  const dragonContainer = document.querySelector('.dragon-container');

  // Reset v·ªã tr√≠ khi con r·ªìng bay ra kh·ªèi m√†n h√¨nh
  setInterval(() => {
    const rect = dragonContainer.getBoundingClientRect();
    if (rect.left > window.innerWidth) {
      dragonContainer.style.left = '-200px';
    }
  }, 100);
}

// G·ªçi h√†m di chuy·ªÉn con r·ªìng
moveDragon();

function createGift() {
  const gift = document.createElement('div');
  gift.classList.add('gift');

  // V·ªã tr√≠ ng·∫´u nhi√™n theo chi·ªÅu ngang
  const randomX = Math.random() * (window.innerWidth - 40); // Tr·ª´ ƒëi k√≠ch th∆∞·ªõc gift
  gift.style.left = randomX + 'px';
  gift.style.top = '-50px';

  const messages = [
    'üéÅ Ch√∫c m·ª´ng! Mong r·∫±ng nƒÉm m·ªõi s·∫Ω c√≥ nhi·ªÅu ƒëi·ªÅu t·ªët ƒë·∫πp ƒë·∫øn v·ªõi emmmm',
    'Ch√∫c M·ª´ng NƒÉm M·ªõi!',
    '‚≠ê NƒÉm m·ªõi h·∫°nh ph√∫c!',
    'NƒÉm ·∫§t T·ªµ th·∫≠t tuy·ªát v·ªùi nh√©!',
    'üå∏ Ch√∫c em m·ªôt nƒÉm m·ªõi an khang, th·ªãnh v∆∞·ª£ng!',
    '‚ú® M·ªôt nƒÉm m·ªõi ƒë·∫ßy ni·ªÅm vui v√† th√†nh c√¥ng!',
    'üéä Hy v·ªçng nƒÉm nay s·∫Ω l√† m·ªôt kh·ªüi ƒë·∫ßu m·ªõi tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng!',
    'üíñ Ch√∫c em v√† gia ƒë√¨nh c√≥ m·ªôt nƒÉm m·ªõi h·∫°nh ph√∫c v√† b√¨nh an!',
    'üçÄ NƒÉm m·ªõi ph√°t t√†i, ph√°t l·ªôc, m·ªçi ƒëi·ªÅu nh∆∞ √Ω!',
    'üéâ H√£y ƒë·ªÉ nƒÉm m·ªõi mang l·∫°i cho em nh·ªØng ƒëi·ªÅu tuy·ªát v·ªùi nh·∫•t!',
    'üåü Ch√∫c em ƒë·∫°t ƒë∆∞·ª£c t·∫•t c·∫£ m·ª•c ti√™u trong nƒÉm m·ªõi!',
    'üéá C√πng ch√†o ƒë√≥n m·ªôt nƒÉm m·ªõi tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng v√† th√†nh c√¥ng!',
    'üíé Mong r·∫±ng nƒÉm m·ªõi s·∫Ω mang l·∫°i cho em nhi·ªÅu may m·∫Øn v√† th·ªãnh v∆∞·ª£ng!',
    'üíê Ch√∫c em m·ªôt nƒÉm m·ªõi r·ª±c r·ª° v√† ƒë·∫ßy m√†u s·∫Øc!',
    'üïäÔ∏è Ch√∫c nƒÉm m·ªõi c·ªßa em ng·∫≠p tr√†n ni·ªÅm vui v√† h·∫°nh ph√∫c!',
    'üåÖ Ch√∫c em m·ªôt nƒÉm m·ªõi ƒë·∫ßy ·∫Øp ti·∫øng c∆∞·ªùi!',
    'üõ§Ô∏è B∆∞·ªõc sang nƒÉm m·ªõi, ch√∫c em lu√¥n m·∫°nh m·∫Ω v√† ƒë·∫°t ƒë∆∞·ª£c nh·ªØng g√¨ mong mu·ªën!',
    '‚ù§Ô∏è G·ª≠i ƒë·∫øn em l·ªùi ch√∫c ·∫•m √°p v√† y√™u th∆∞∆°ng cho nƒÉm m·ªõi!',
];

  gift.addEventListener('click', () => {
    const popup = document.createElement('div');
    popup.classList.add('gift-popup');
    popup.textContent = messages[Math.floor(Math.random() * messages.length)];
    document.body.appendChild(popup);
    popup.style.display = 'block';

    

    setTimeout(() => {
      popup.style.display = 'none';
      popup.remove();
    }, 3000);

    gift.remove();
  });

  document.body.appendChild(gift);

  // Animation r∆°i m∆∞·ª£t m√† h∆°n
  let pos = -50;
  let speed = 1;
  const maxSpeed = 3;
  const acceleration = 0.05;

  const fall = setInterval(() => {
    speed = Math.min(speed + acceleration, maxSpeed);
    pos += speed;
    gift.style.top = pos + 'px';

    // Ki·ªÉm tra va ch·∫°m v·ªõi ƒë√°y m√†n h√¨nh
    if (pos > window.innerHeight) {
      clearInterval(fall);
      gift.remove();
    }
  }, 20);
}

// Gi·∫£m t·∫ßn su·∫•t t·∫°o qu√†
setInterval(createGift, 1000); // 8 gi√¢y m·ªôt l·∫ßn

function addTreeLights() {
  const tree = document.querySelector('.tree');
  const colors = ['#ff0', '#f00', '#0f0', '#00f', '#ff0'];

  for (let i = 0; i < 20; i++) {
    const light = document.createElement('div');
    light.classList.add('light');
    light.style.background = colors[Math.floor(Math.random() * colors.length)];
    light.style.left = Math.random() * 100 + '%';
    light.style.top = Math.random() * 100 + '%';
    light.style.animationDelay = Math.random() * 2 + 's';
    tree.appendChild(light);
  }
}

function updateCountdown() {
  const targetDate = new Date('2025-01-29T00:00:00');
  const now = new Date();
  const diff = targetDate - now;

  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((diff % (1000 * 60)) / 1000);

  document.getElementById('days').textContent = days.toString().padStart(2, '0');
  document.getElementById('hours').textContent = hours.toString().padStart(2, '0');
  document.getElementById('minutes').textContent = minutes.toString().padStart(2, '0');
  document.getElementById('seconds').textContent = seconds.toString().padStart(2, '0');
}

setInterval(updateCountdown, 1000);

// Hi·ªáu ·ª©ng m√¢y tr√¥i
function animateClouds() {
  const clouds = document.querySelectorAll('.cloud');
  clouds.forEach((cloud, index) => {
    cloud.style.animation = `float ${15 + index * 2}s linear infinite`;
    cloud.style.top = `${index * 15}%`;
  });
}

// Hi·ªáu ·ª©ng ph√°o hoa
let isAnimating = false; // Tr√°nh t·∫°o qu√° nhi·ªÅu hi·ªáu ·ª©ng khi ng∆∞·ªùi d√πng click li√™n t·ª•c.

function createFirework(x, y) {
  if (isAnimating) return; // NgƒÉn t·∫°o hi·ªáu ·ª©ng n·∫øu ƒëang ch·∫°y
  isAnimating = true;

  const colors = ['#ff0', '#ff4', '#4ff', '#f4f', '#4f4'];
  const particles = 10;
  const container = document.querySelector('.fireworks-container');

  // K√≠ch th∆∞·ªõc v√πng gi·ªõi h·∫°n
  const regionSize = 100; // K√≠ch th∆∞·ªõc v√πng ph√°o hoa (100px x 100px)
  const minX = x - regionSize / 2;
  const maxX = x + regionSize / 2;
  const minY = y - regionSize / 2;
  const maxY = y + regionSize / 2;

  for (let i = 0; i < particles; i++) {
    const particle = document.createElement('div');
    particle.className = 'firework-particle';
    particle.style.backgroundColor =
      colors[Math.floor(Math.random() * colors.length)];

    // Random v·ªã tr√≠ xu·∫•t ph√°t trong v√πng gi·ªõi h·∫°n
    const startX = Math.random() * (maxX - minX) + minX;
    const startY = Math.random() * (maxY - minY) + minY;

    particle.style.left = startX + 'px';
    particle.style.top = startY + 'px';

    container.appendChild(particle);

    const angle = (i * 360) / particles;
    const velocity = 2 + Math.random() * 2;

    const rad = (angle * Math.PI) / 180;
    const vx = Math.cos(rad) * velocity;
    const vy = Math.sin(rad) * velocity;

    let posX = startX;
    let posY = startY;
    let lifetime = 100; // S·ªëng trong 100 frame

    const animate = () => {
      posX += vx;
      posY += vy;

      // X√≥a h·∫°t khi h·∫øt th·ªùi gian s·ªëng
      if (lifetime-- <= 0) {
        particle.remove();
        return;
      }

      particle.style.left = `${posX}px`;
      particle.style.top = `${posY}px`;

      requestAnimationFrame(animate);
    };

    animate();
  }

  // Cho ph√©p click t·∫°o hi·ªáu ·ª©ng m·ªõi sau 300ms
  setTimeout(() => {
    isAnimating = false;
  }, 300);
}

// G·∫Øn s·ª± ki·ªán click v√†o document
document.addEventListener('click', (event) => {
  createFirework(event.clientX, event.clientY);
});


// G·∫Øn s·ª± ki·ªán click v√†o document
document.addEventListener('click', (event) => {
  createFirework(event.clientX, event.clientY);
});


// Hi·ªáu ·ª©ng particle khi di chu·ªôt
function createParticle(e) {
  const particle = document.createElement('div');
  particle.className = 'mouse-particle';
  particle.style.left = e.pageX + 'px';
  particle.style.top = e.pageY + 'px';
  document.body.appendChild(particle);

  setTimeout(() => particle.remove(), 1000);
}

// Th√™m t∆∞∆°ng t√°c v·ªõi c√¢y th√¥ng
function addTreeInteraction() {
  const tree = document.querySelector('.tree');
  const bells = document.querySelectorAll('.bell');

  tree.addEventListener('click', () => {
    tree.classList.add('shake');

    // Th√™m hi·ªáu ·ª©ng rung cho chu√¥ng
    bells.forEach((bell) => {
      bell.style.animation = 'none';
      bell.offsetHeight; // Trigger reflow
      bell.style.animation = 'bellRing 0.5s';
    });

    setTimeout(() => {
      tree.classList.remove('shake');
      bells.forEach((bell) => {
        bell.style.animation = 'bellRing 2s infinite';
      });
    }, 500);
  });
}

// Th√™m h√†m trang tr√≠ c√¢y th√¥ng m·ªõi
function decorateTree() {
  const tree = document.querySelector('.tree');
  const layers = document.querySelectorAll('.tree-layer');

  // Th√™m chu√¥ng
  const bellPositions = [
    { left: '40%', top: '20%' },
    { right: '20%', top: '40%' },
    { left: '30%', top: '60%' },
    { right: '25%', top: '70%' },
  ];

  bellPositions.forEach((pos) => {
    const bell = document.createElement('div');
    bell.className = 'bell';
    Object.assign(bell.style, pos);
    tree.appendChild(bell);
  });

  // Th√™m c√°c qu·∫£ ch√¢u
  const colors = ['red', 'gold', 'silver'];
  layers.forEach((layer) => {
    const layerRect = layer.getBoundingClientRect();
    const numOrnaments = 8;

    for (let i = 0; i < numOrnaments; i++) {
      const ornament = document.createElement('div');
      ornament.className = `ornament ${
        colors[Math.floor(Math.random() * colors.length)]
      }`;

      // V·ªã tr√≠ ng·∫´u nhi√™n trong ph·∫°m vi c·ªßa t·∫ßng
      const left = 20 + Math.random() * 60; // 20% ƒë·∫øn 80%
      const top = 20 + Math.random() * 60; // 20% ƒë·∫øn 80%

      ornament.style.left = `${left}%`;
      ornament.style.top = `${top}%`;

      layer.appendChild(ornament);
    }
  });

  // Th√™m hi·ªáu ·ª©ng l·∫•p l√°nh
  const lights = 30;
  for (let i = 0; i < lights; i++) {
    const light = document.createElement('div');
    light.className = 'light';
    light.style.left = `${Math.random() * 100}%`;
    light.style.top = `${Math.random() * 100}%`;
    light.style.animationDelay = `${Math.random() * 2}s`;
    light.style.background = `hsl(${Math.random() * 360}, 100%, 70%)`;
    tree.appendChild(light);
  }
}

// Kh·ªüi t·∫°o c√°c hi·ªáu ·ª©ng
document.addEventListener('DOMContentLoaded', () => {
  const treeImage = document.querySelector('.tree img'); // Gi·∫£ s·ª≠ ·∫£nh c√¢y th√¥ng n·∫±m trong class .tree

  // N·∫øu ·∫£nh ƒë√£ load xong
  if (treeImage.complete) {
    decorateTree();
    addTreeLights();
  } else {
    // N·∫øu ·∫£nh ch∆∞a load xong, ƒë·ª£i s·ª± ki·ªán load
    treeImage.addEventListener('load', () => {
      decorateTree();
      addTreeLights();
    });
  }

  // C√°c hi·ªáu ·ª©ng kh√°c v·∫´n gi·ªØ nguy√™n
  animateClouds();
  addTreeInteraction();

  document.addEventListener('click', (e) => {
    createFirework(e.pageX, e.pageY);
    createParticle(e);
  });

  document.addEventListener('mousemove', (e) => {
    if (Math.random() < 0.1) {
      createParticle(e);
    }
  });
});


function createLeaves() {
  const leavesContainer = document.querySelector('.snow-container');
  const numberOfLeaves = 100;

  for (let i = 0; i < numberOfLeaves; i++) {
    const leaf = document.createElement('div');
    leaf.classList.add('snow'); // Use the updated class name
    leaf.style.left = Math.random() * 100 + '%';
    leaf.style.top = Math.random() * 60 + '%'; // Ch·ªâ ·ªü n·ª≠a tr√™n m√†n h√¨nh
    leaf.style.animationDelay = Math.random() * 2 + 's';
    leavesContainer.appendChild(leaf);
  }
}

// G·ªçi h√†m t·∫°o l√° khi trang web load
createLeaves();